local RunService = game:GetService("RunService")
local HttpService = game:GetService("HttpService")
local UserInputService = game:GetService("UserInputService")
local Workspace = game:GetService("Workspace")

-- Main configuration
local CONFIG = {
    speed = 20,
    jumpPower = 121,
    maxHealth = 70,
    respawnTime = 11,
    debugMode = false
}

-- Event connections
local remotes = ReplicatedStorage:WaitForChild("Remotes")
local damageEvent = remotes:WaitForChild("DamageEvent")
local healEvent = remotes:WaitForChild("HealEvent")
local respawnEvent = remotes:WaitForChild("RespawnEvent")

-- Weapon definitions extracted from obfuscated table
local weapons = {
    {
        name = "Sword",
        damage = 15,
        cooldown = 0.8,
        range = 4
    },
    {
        name = "Bow",
        damage = 10,
        cooldown = 1.2,
        range = 30
    },
    {
        name = "Staff",
        damage = 25,
        cooldown = 2.5,
        range = 15
    }
}

-- Utility functions
local function calculateDamage(baseDamage, distance, player)
    local character = player.Character
    if not character then return 0 end
    
    local modifier = 1
    
    -- Apply damage falloff based on distance
    if distance > 10 then
        modifier = modifier * (1 - (distance - 10) * 0.02)
    end
    
    -- Apply random variation
    modifier = modifier * (math.random() * 0.2 + 0.9)
    
    return math.floor(baseDamage * modifier)
end

-- Player handling
local function setupPlayer(player)
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:WaitForChild("Humanoid")
    
    humanoid.WalkSpeed = CONFIG.speed
    humanoid.JumpPower = CONFIG.jumpPower
    humanoid.MaxHealth = CONFIG.maxHealth
    humanoid.Health = CONFIG.maxHealth
    
    -- Setup damage handling
    damageEvent.OnServerEvent:Connect(function(playerWhoFired, targetPlayer, damageAmount, weaponIndex)
        if playerWhoFired ~= player then return end
        if not targetPlayer or not targetPlayer.Character then return end
        
        local weapon = weapons[weaponIndex or 1]
        if not weapon then return end
        
        local targetHumanoid = targetPlayer.Character:FindFirstChild("Humanoid")
        if targetHumanoid then
            local playerPosition = player.Character.PrimaryPart.Position
            local targetPosition = targetPlayer.Character.PrimaryPart.Position
            local distance = (playerPosition - targetPosition).Magnitude
            
            if distance <= weapon.range then
                local finalDamage = calculateDamage(damageAmount or weapon.damage, distance, targetPlayer)
                targetHumanoid.Health = math.max(0, targetHumanoid.Health - finalDamage)
                
                -- Fire client effects
                remotes.DamageEffect:FireClient(targetPlayer, finalDamage)
            end
        end
    end)
}

-- Initialize for existing players
for _, player in ipairs(Players:GetPlayers()) do
    setupPlayer(player)
end

-- Setup for new players
Players.PlayerAdded:Connect(setupPlayer)

-- Game loop (extracted from obfuscated while loop)
RunService.Heartbeat:Connect(function(deltaTime)
    for _, player in ipairs(Players:GetPlayers()) do
        local character = player.Character
        if character and character:FindFirstChild("Humanoid") then
            -- Update player status
            -- This section was heavily obfuscated and may not be 100% accurate
            local humanoid = character:FindFirstChild("Humanoid")
            if humanoid.Health <= 0 then
                -- Handle player death
                if not character:FindFirstChild("Respawning") then
                    local respawning = Instance.new("BoolValue")
                    respawning.Name = "Respawning"
                    respawning.Parent = character
                    
                    -- Respawn player after delay
                    task.delay(CONFIG.respawnTime, function()
                        respawnEvent:FireClient(player)
                    end)
                end
            end
        end
    end
end)
